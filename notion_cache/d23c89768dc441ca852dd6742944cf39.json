{
  "ID": "d23c8976-8dc4-41ca-852d-d6742944cf39",
  "Page": {
    "alive": true,
    "content": [
      "d1124fa7-725e-4e89-821d-31eed437d30a",
      "eb7b52f2-3a94-41aa-89f4-9e3ff1302b55",
      "312fccbd-24a7-438c-b009-3d396ba91764",
      "4b0579fa-06df-4b1f-9eae-312d86c6af35",
      "a064e6f5-53fd-4080-8785-6434b42c8515",
      "32df59ac-b1be-4703-9044-f3d13f51884e",
      "765e6f9b-f26a-4135-8fc6-3de16ca2aa64",
      "519a289f-dc95-48db-a58e-2fc81a021198",
      "84b6809e-95a0-4a1a-9330-161c84f0030d",
      "8600895a-8567-4fc6-b321-d256a9e8b783",
      "7eaa1c23-8726-4d99-9e08-3b481a031eba",
      "36cf83e0-a563-440b-ac47-42a01984c6c4",
      "bd342d8d-1ee7-4d6c-84f3-9dd89de143dc",
      "566403f1-f598-42aa-b01f-7d4301ccd815",
      "d8d59072-a714-4f41-9622-9c38137ad215",
      "fa90edff-82d9-4e8e-88bf-cc53b6fba79f"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1531200907019,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1531623012187,
    "parent_id": "300db9dc-27c8-4958-a08b-8d0c37f4cfe5",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using averages - a common performance measurement mistake"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907019,
        "id": "d1124fa7-725e-4e89-821d-31eed437d30a",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531623012692,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Id: 340001"
            ]
          ]
        },
        "type": "text",
        "version": 5,
        "inline_content": [
          {
            "Text": "Id: 340001"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "eb7b52f2-3a94-41aa-89f4-9e3ff1302b55",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531623013999,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Tags: programming"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Tags: programming"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "312fccbd-24a7-438c-b009-3d396ba91764",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531200907020,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Date: 2010-11-24T22:06:05-08:00 "
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Date: 2010-11-24T22:06:05-08:00 "
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "4b0579fa-06df-4b1f-9eae-312d86c6af35",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531623009049,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "type": "text",
        "version": 3
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "a064e6f5-53fd-4080-8785-6434b42c8515",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531200907020,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Summary:",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              " when people want to get a more accurate result when benchmarking a performance of given piece of code they often run the same test multiple times and use an average as a final benchmark result. It’s a mistake: using the time of the fastest run is more accurate."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Summary:",
            "AttrFlags": 1
          },
          {
            "Text": " when people want to get a more accurate result when benchmarking a performance of given piece of code they often run the same test multiple times and use an average as a final benchmark result. It’s a mistake: using the time of the fastest run is more accurate."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "32df59ac-b1be-4703-9044-f3d13f51884e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531200907020,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "By definition, a performance test must be deterministic: given the same inputs it’ll execute exactly the same number of machine instructions, read and write the same amount of data to/from disk etc. If it isn’t deterministic, benchmarking it is pointless."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "By definition, a performance test must be deterministic: given the same inputs it’ll execute exactly the same number of machine instructions, read and write the same amount of data to/from disk etc. If it isn’t deterministic, benchmarking it is pointless."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "765e6f9b-f26a-4135-8fc6-3de16ca2aa64",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531200907020,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We all know, however, that execution time is not deterministic. Why is that?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We all know, however, that execution time is not deterministic. Why is that?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "519a289f-dc95-48db-a58e-2fc81a021198",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531200907020,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Multi-tasking nature of the operating system is to blame. Your code is only one of the many processes that compete for fixed resources like cpu time and i/o bandwidth. Operating system will interrupt your program and start executing some other code, at random times and for unpredictable amount of time."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Multi-tasking nature of the operating system is to blame. Your code is only one of the many processes that compete for fixed resources like cpu time and i/o bandwidth. Operating system will interrupt your program and start executing some other code, at random times and for unpredictable amount of time."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "84b6809e-95a0-4a1a-9330-161c84f0030d",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531200907020,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If you measure just the time of execution, like most benchmarking methods do, it’ll include not only the execution time of your code but also of other programs executed by operating system during that particular test run."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If you measure just the time of execution, like most benchmarking methods do, it’ll include not only the execution time of your code but also of other programs executed by operating system during that particular test run."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "8600895a-8567-4fc6-b321-d256a9e8b783",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531200907020,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The same applies to other shared resources like a hard-drive: the benchmarked program asks the OS to read a piece of data from disk but so do other programs. The OS decides who gets to do I/O first in an unpredictable and unaccountable way."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The same applies to other shared resources like a hard-drive: the benchmarked program asks the OS to read a piece of data from disk but so do other programs. The OS decides who gets to do I/O first in an unpredictable and unaccountable way."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "7eaa1c23-8726-4d99-9e08-3b481a031eba",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531200907020,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You have little control over that behavior. You can think of execution time of your test as consisting of 2 components:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You have little control over that behavior. You can think of execution time of your test as consisting of 2 components:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "36cf83e0-a563-440b-ac47-42a01984c6c4",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531200907020,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the deterministic execution time of only your code, which would happen if your process had exclusive access to all resources like cpu and hard-drive"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "the deterministic execution time of only your code, which would happen if your process had exclusive access to all resources like cpu and hard-drive"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "bd342d8d-1ee7-4d6c-84f3-9dd89de143dc",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531200907020,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "random, unpredictable execution time of all other programs that OS decided to run during that particular test run"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "random, unpredictable execution time of all other programs that OS decided to run during that particular test run"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "566403f1-f598-42aa-b01f-7d4301ccd815",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531200907020,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In other words, the benchmarked time is: the time your’re interested in + a random overhead attributable to other processes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In other words, the benchmarked time is: the time your’re interested in + a random overhead attributable to other processes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "d8d59072-a714-4f41-9622-9c38137ad215",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531200907020,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This model explains why you should use the time of the fastest test run: it’s the best approximation of the running time that is attributable only to your code (and with the smallest part attributable to other random processes)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This model explains why you should use the time of the fastest test run: it’s the best approximation of the running time that is attributable only to your code (and with the smallest part attributable to other random processes)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531200907020,
        "id": "fa90edff-82d9-4e8e-88bf-cc53b6fba79f",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531200907020,
        "parent_id": "d23c8976-8dc4-41ca-852d-d6742944cf39",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Other coping mechanisms when doing performance tests involve trying to minimize the random component by shutting down as many processes as possible, so that less things will get in the way."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Other coping mechanisms when doing performance tests involve trying to minimize the random component by shutting down as many processes as possible, so that less things will get in the way."
          }
        ]
      }
    ],
    "title": "Using averages - a common performance measurement mistake",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 9
    }
  ],
  "Collections": null,
  "CollectionViews": null
}