{
  "ID": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
  "Page": {
    "alive": true,
    "content": [
      "5ccc04ff-9b00-4ca7-a06c-fd8095ab1f9e",
      "1a828a23-22ea-4fef-83c1-fcd66f5aa208",
      "7c02e13a-c1db-4fd9-a1a9-51c052156338",
      "14cb3f65-2469-48b8-a1f9-da97c8360b2c",
      "b3fe6598-bad9-4510-9ae3-a49588fce076",
      "977c743c-bc44-449f-b955-1d52bf4e5bac",
      "5776e152-2e79-4468-bca4-05d6d57e2bad",
      "29df8674-be5f-450c-a0f0-a8e9a1ccbfe5",
      "ab243c8f-f93b-488e-8308-4d327e068d98",
      "2d6c8c4d-873f-48e4-87a5-7bec91c8356c",
      "dc635b06-2d13-4f9a-969d-b73d633589d8",
      "5ec109db-d1fb-429e-8cae-923cd12915c1",
      "e6f04242-4129-419d-a252-3dd5a6a366bb",
      "8f8a5b82-724b-43f3-b855-144641696593",
      "aa306e26-8b97-469d-b636-d8fa0121ae17",
      "d1926408-b720-4645-abe8-ea546cebb63d",
      "4cdc6022-af39-444d-b2e4-0687caa8e472",
      "02c1f7be-fdef-4d65-b661-0d80e452d62e",
      "e7534665-6498-4669-93a0-26f8d002a7b4",
      "e5470ace-507e-4509-90d0-ba468d1e6419",
      "3f5e6c12-da4e-4555-a3fe-2395c7524e18",
      "e627572b-12a6-433b-af89-4065cf7a1ebe",
      "40386777-1dd0-4c86-98a1-087b32ec095b",
      "129e1b09-3e96-49f7-b1d6-1f6a0c3bf04d",
      "be4feac5-bc74-4515-96f6-58f1690a8573",
      "f8d4034b-e6e6-45fc-85bb-93075c8203e6",
      "df351f9e-835f-40fe-95b2-153496e62057",
      "7836c10f-ce71-4a41-b271-c499c82e33ad",
      "b94ec327-6f10-478f-8c42-1c85fc4bb762",
      "7eee250e-ec51-4566-9fe7-ea586e2d626b",
      "1805766d-ef0b-4e5d-81ab-68940ac10a8f",
      "445de7f5-7969-4581-a6ef-68fc44a2d481",
      "e6e1ff96-a4d6-4a12-bd72-837a922da7a6",
      "86f462d9-55f5-4ff1-a14b-53e0cf2821c1"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1531195849497,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1531623984656,
    "parent_id": "300db9dc-27c8-4958-a08b-8d0c37f4cfe5",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Performance optimization story"
        ]
      ]
    },
    "type": "page",
    "version": 11,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849497,
        "id": "5ccc04ff-9b00-4ca7-a06c-fd8095ab1f9e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531623984656,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Id: 950"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Id: 950"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849497,
        "id": "1a828a23-22ea-4fef-83c1-fcd66f5aa208",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849497,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Tags: programming, optimization"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Tags: programming, optimization"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849497,
        "id": "7c02e13a-c1db-4fd9-a1a9-51c052156338",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849497,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Date: 2006-08-14T12:27:26-07:00"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Date: 2006-08-14T12:27:26-07:00"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849497,
        "id": "14cb3f65-2469-48b8-a1f9-da97c8360b2c",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531623983412,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "type": "text",
        "version": 3
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849497,
        "id": "b3fe6598-bad9-4510-9ae3-a49588fce076",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849497,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The story you’re about to read makes those major points about optimizing software for speed:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The story you’re about to read makes those major points about optimizing software for speed:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849497,
        "id": "977c743c-bc44-449f-b955-1d52bf4e5bac",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849497,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "it’s good to read other people’s sources. You will learn new tricks."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "it’s good to read other people’s sources. You will learn new tricks."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849497,
        "id": "5776e152-2e79-4468-bca4-05d6d57e2bad",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849497,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "performance work is driven by data. Don’t guess what is slow, measure it."
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "performance work is driven by data. Don’t guess what is slow, measure it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849497,
        "id": "29df8674-be5f-450c-a0f0-a8e9a1ccbfe5",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849497,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "a good profiler is extremely helpful in getting the data"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "a good profiler is extremely helpful in getting the data"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849497,
        "id": "ab243c8f-f93b-488e-8308-4d327e068d98",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849497,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "lots of allocation of small objects isn’t good in a C/C++ program"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "lots of allocation of small objects isn’t good in a C/C++ program"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "2d6c8c4d-873f-48e4-87a5-7bec91c8356c",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When working on my "
            ],
            [
              "Sumatra PDF viewer",
              [
                [
                  "a",
                  "https://www.sumatrapdfreader.org/"
                ]
              ]
            ],
            [
              " for Windows, I decided to take a look at the performance. I profiled the code to parse a rather large (~8MB) PDF. I found a rather surprising thing: a lot of time was spent inside malloc()/free() (they were in the top 10 most expensive functions in the profile) and a large portion of those allocations/frees was for strings. The code in question has it’s own, simple GooString class."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When working on my "
          },
          {
            "Text": "Sumatra PDF viewer",
            "Link": "https://www.sumatrapdfreader.org/"
          },
          {
            "Text": " for Windows, I decided to take a look at the performance. I profiled the code to parse a rather large (~8MB) PDF. I found a rather surprising thing: a lot of time was spent inside malloc()/free() (they were in the top 10 most expensive functions in the profile) and a large portion of those allocations/frees was for strings. The code in question has it’s own, simple GooString class."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "dc635b06-2d13-4f9a-969d-b73d633589d8",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To get more data I instrumented GooString destructor to find out what are the typical sizes of the strings. An allocation histogram told me that about 90% of them is 16 bytes or less."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To get more data I instrumented GooString destructor to find out what are the typical sizes of the strings. An allocation histogram told me that about 90% of them is 16 bytes or less."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "5ec109db-d1fb-429e-8cae-923cd12915c1",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Then I looked at the implementation. GooString is a very typical implementation. It keeps track of the size of string and a pointer to\nallocated string i.e. (to paraphrase):"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Then I looked at the implementation. GooString is a very typical implementation. It keeps track of the size of string and a pointer to\nallocated string i.e. (to paraphrase):"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "e6f04242-4129-419d-a252-3dd5a6a366bb",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Java/C/C++/C#"
            ]
          ],
          "title": [
            [
              "class GooString {\n int length;\n char * str;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class GooString {\n int length;\n char * str;\n};",
        "code_language": "Java/C/C++/C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "8f8a5b82-724b-43f3-b855-144641696593",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It does have an interesting trick. Most typical implementations allocate more memory than strictly needed for the string, which avoids frequent re-allocation when you add data to string. So they also have to keep track of how big is the actual allocated area e.g.:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It does have an interesting trick. Most typical implementations allocate more memory than strictly needed for the string, which avoids frequent re-allocation when you add data to string. So they also have to keep track of how big is the actual allocated area e.g.:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "aa306e26-8b97-469d-b636-d8fa0121ae17",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Java/C/C++/C#"
            ]
          ],
          "title": [
            [
              "class DumberString {\n int allocated; /* the real size of ‘str’ buffer */\n int length;\n char *str;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "class DumberString {\n int allocated; /* the real size of ‘str’ buffer */\n int length;\n char *str;\n};",
        "code_language": "Java/C/C++/C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "d1926408-b720-4645-abe8-ea546cebb63d",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "GooString gets rid of ‘allocated’ variable by using a rounding function based on size e.g.:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "GooString gets rid of ‘allocated’ variable by using a rounding function based on size e.g.:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "4cdc6022-af39-444d-b2e4-0687caa8e472",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Java/C/C++/C#"
            ]
          ],
          "title": [
            [
              "static inline int rounded\\_size(int len) {\n int delta;\n delta = len \u003c 256 ? 7 : 255;\n return ((len + 1) + delta) \u0026 ~delta;\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "static inline int rounded\\_size(int len) {\n int delta;\n delta = len \u003c 256 ? 7 : 255;\n return ((len + 1) + delta) \u0026 ~delta;\n}",
        "code_language": "Java/C/C++/C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "02c1f7be-fdef-4d65-b661-0d80e452d62e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "That way "
            ],
            [
              "GooString",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " saves 4 bytes per object. Not that it usually matters, as we’ll find out very shortly, but it illustrates that reading other people’s code is useful. I’ve seen a couple of string implementation but this is the first time I noticed that particular trick and I would probably never have come up with that trick by myself."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "That way "
          },
          {
            "Text": "GooString",
            "AttrFlags": 2
          },
          {
            "Text": " saves 4 bytes per object. Not that it usually matters, as we’ll find out very shortly, but it illustrates that reading other people’s code is useful. I’ve seen a couple of string implementation but this is the first time I noticed that particular trick and I would probably never have come up with that trick by myself."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "e7534665-6498-4669-93a0-26f8d002a7b4",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The problem with "
            ],
            [
              "GooString",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is that creating an instance causes 2 allocations: one for the object and another for the str pointer."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The problem with "
          },
          {
            "Text": "GooString",
            "AttrFlags": 2
          },
          {
            "Text": " is that creating an instance causes 2 allocations: one for the object and another for the str pointer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "e5470ace-507e-4509-90d0-ba468d1e6419",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You might think that the amount of memory taken from the system for a 1-byte string (an empty string that only contains terminating zero) would be "
            ],
            [
              "sizeof(GooString) (8) + 1",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " i.e. 9 bytes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You might think that the amount of memory taken from the system for a 1-byte string (an empty string that only contains terminating zero) would be "
          },
          {
            "Text": "sizeof(GooString) (8) + 1",
            "AttrFlags": 2
          },
          {
            "Text": " i.e. 9 bytes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "3f5e6c12-da4e-4555-a3fe-2395c7524e18",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is not so. First, most systems rounds allocation. You can find out a rounding of your system with:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is not so. First, most systems rounds allocation. You can find out a rounding of your system with:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "e627572b-12a6-433b-af89-4065cf7a1ebe",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Java/C/C++/C#"
            ]
          ],
          "title": [
            [
              "int n = (char*)malloc(1) - (char*)malloc(1);\n  printf(“rounding: %d\\n”,n);"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "int n = (char*)malloc(1) - (char*)malloc(1);\n  printf(“rounding: %d\\n”,n);",
        "code_language": "Java/C/C++/C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "40386777-1dd0-4c86-98a1-087b32ec095b",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "On Ubuntu Linux this turns out to be 16. Allocating 1 byte or 16 bytes uses the same amount of memory. One instance of "
            ],
            [
              "GooString",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " uses 32 bytes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "On Ubuntu Linux this turns out to be 16. Allocating 1 byte or 16 bytes uses the same amount of memory. One instance of "
          },
          {
            "Text": "GooString",
            "AttrFlags": 2
          },
          {
            "Text": " uses 32 bytes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "129e1b09-3e96-49f7-b1d6-1f6a0c3bf04d",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "But that’s not all. The OS has to somehow keep track of each allocation. How it’s done and what’s the exact overhead are highly implementation dependent, but we can safely assume at least 8 bytes (that’s just 2 32-bit pointers). So the real cost of allocating a 1-byte GooString is at least 48 bytes. And we thought it was 9."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "But that’s not all. The OS has to somehow keep track of each allocation. How it’s done and what’s the exact overhead are highly implementation dependent, but we can safely assume at least 8 bytes (that’s just 2 32-bit pointers). So the real cost of allocating a 1-byte GooString is at least 48 bytes. And we thought it was 9."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "be4feac5-bc74-4515-96f6-58f1690a8573",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There is a better way. A trick used in dynamic string implementation in\nvenerable Tcl language uses a static buffer that is a part of the string:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There is a better way. A trick used in dynamic string implementation in\nvenerable Tcl language uses a static buffer that is a part of the string:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "f8d4034b-e6e6-45fc-85bb-93075c8203e6",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Java/C/C++/C#"
            ]
          ],
          "title": [
            [
              "#define STR_STATIC_SIZE 16\nclass BetterString {\n char sStatic[STR_STATIC_SIZE];\n int length;\n char * ‘s’;\n};"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "#define STR_STATIC_SIZE 16\nclass BetterString {\n char sStatic[STR_STATIC_SIZE];\n int length;\n char * ‘s’;\n};",
        "code_language": "Java/C/C++/C#"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "df351f9e-835f-40fe-95b2-153496e62057",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If the size of the string is less than "
            ],
            [
              "STR_STATIC_SIZE",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", "
            ],
            [
              "str",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " points to "
            ],
            [
              "sStatic",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". If it’s bigger, we allocate the string as before. That way for strings smaller than "
            ],
            [
              "STR_STATIC_SIZE",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " we don’t have to allocate memory (halving the cost of allocations). It doesn’t even cost us more memory in most cases since for small strings we avoid the minimum 24 bytes cost of allocating at least 1 byte, and for larger strings the overhead is small compared to the total size."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If the size of the string is less than "
          },
          {
            "Text": "STR_STATIC_SIZE",
            "AttrFlags": 2
          },
          {
            "Text": ", "
          },
          {
            "Text": "str",
            "AttrFlags": 2
          },
          {
            "Text": " points to "
          },
          {
            "Text": "sStatic",
            "AttrFlags": 2
          },
          {
            "Text": ". If it’s bigger, we allocate the string as before. That way for strings smaller than "
          },
          {
            "Text": "STR_STATIC_SIZE",
            "AttrFlags": 2
          },
          {
            "Text": " we don’t have to allocate memory (halving the cost of allocations). It doesn’t even cost us more memory in most cases since for small strings we avoid the minimum 24 bytes cost of allocating at least 1 byte, and for larger strings the overhead is small compared to the total size."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "7836c10f-ce71-4a41-b271-c499c82e33ad",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can tweak "
            ],
            [
              "STR_STATIC_SIZE",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". The bigger it is, the faster we’ll be (less cases where we need to allocate additional storage) but more memory we’ll use."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can tweak "
          },
          {
            "Text": "STR_STATIC_SIZE",
            "AttrFlags": 2
          },
          {
            "Text": ". The bigger it is, the faster we’ll be (less cases where we need to allocate additional storage) but more memory we’ll use."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "b94ec327-6f10-478f-8c42-1c85fc4bb762",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In my particular case, implementing this trick reduced allocations due to string by 45% (since 90% of strings were less than "
            ],
            [
              "STR_STATIC_SIZE",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ") which improved loading time by 10%. And that was "
            ],
            [
              "a very simple change",
              [
                [
                  "a",
                  "https://bugs.freedesktop.org/attachment.cgi?id=6496"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In my particular case, implementing this trick reduced allocations due to string by 45% (since 90% of strings were less than "
          },
          {
            "Text": "STR_STATIC_SIZE",
            "AttrFlags": 2
          },
          {
            "Text": ") which improved loading time by 10%. And that was "
          },
          {
            "Text": "a very simple change",
            "Link": "https://bugs.freedesktop.org/attachment.cgi?id=6496"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "7eee250e-ec51-4566-9fe7-ea586e2d626b",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "So let’s recap the things we can learn from this story."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "So let’s recap the things we can learn from this story."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849498,
        "id": "1805766d-ef0b-4e5d-81ab-68940ac10a8f",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849498,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The only way to know what is slow is to get data i.e. profile the app. Pdf parser and renderer I use is a complex piece of code. It would be pointless for me to try to guess which part of it is slow."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The only way to know what is slow is to get data i.e. profile the app. Pdf parser and renderer I use is a complex piece of code. It would be pointless for me to try to guess which part of it is slow."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849499,
        "id": "445de7f5-7969-4581-a6ef-68fc44a2d481",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849499,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A good profiler is essential to giving the right data. An hour spent profiling and reading the results pointed me in the right direction."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "A good profiler is essential to giving the right data. An hour spent profiling and reading the results pointed me in the right direction."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849499,
        "id": "e6e1ff96-a4d6-4a12-bd72-837a922da7a6",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849499,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s important for a programmer to read other people’s source code. I’ve learn new tricks from reading the source of "
            ],
            [
              "GooString",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". I’ve learn new tricks from reading Tcl’s implementation. In the end it’s much cheaper than trying to come up with those ideas on my own."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s important for a programmer to read other people’s source code. I’ve learn new tricks from reading the source of "
          },
          {
            "Text": "GooString",
            "AttrFlags": 2
          },
          {
            "Text": ". I’ve learn new tricks from reading Tcl’s implementation. In the end it’s much cheaper than trying to come up with those ideas on my own."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531195849499,
        "id": "86f462d9-55f5-4ff1-a14b-53e0cf2821c1",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531195849499,
        "parent_id": "44db41a4-3b22-4eba-b59d-c3fe00cef4dc",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "And finally, as you can see, allocating small objects in C\\C++ has a huge overhead, so try not to do it. Unfortunately naive implementation of common data structures (strings, nodes in trees or lists) has a problem of requiring lots of small allocation. A good answer to this problem is custom allocator that pre-allocates large numbers of a given object and uses a bitmap to keep track of which ones are used (1-bit overhead per object as opposed to 8 + whatever rounding to 16 takes). And, if done right, they should be faster than a standard OS allocator. But that’s a story for another day."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "And finally, as you can see, allocating small objects in C\\C++ has a huge overhead, so try not to do it. Unfortunately naive implementation of common data structures (strings, nodes in trees or lists) has a problem of requiring lots of small allocation. A good answer to this problem is custom allocator that pre-allocates large numbers of a given object and uses a bitmap to keep track of which ones are used (1-bit overhead per object as opposed to 8 + whatever rounding to 16 takes). And, if done right, they should be faster than a standard OS allocator. But that’s a story for another day."
          }
        ]
      }
    ],
    "title": "Performance optimization story",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 9
    }
  ],
  "Collections": null,
  "CollectionViews": null
}