{
  "ID": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
  "Page": {
    "alive": true,
    "content": [
      "90b15619-97a4-461a-87ac-200d9397e3b6",
      "7099efdf-4ade-4305-8e86-11262580a343",
      "4f8525b6-0b96-46a9-bde7-8bf7d4b1f127",
      "4fba1f2a-ed45-4960-98a6-88e216bd774f",
      "f58911af-3891-403f-98d0-8da5918cd42a",
      "d2cdf455-ff92-4512-a950-506ac522c15a",
      "c8421b81-71ab-4ec4-95a6-47c49074a47e",
      "601195e2-f36d-4635-a946-8da4fb376e91",
      "a73d8b85-28aa-4550-81ec-6143f7a3e28b",
      "21adcbd5-c67b-4843-abd0-d6a7804c85ad",
      "d9b14df0-e442-4988-ad36-f86216e4c6d1",
      "cdb4e87b-9087-4b0a-95b8-0ee0efe8b150",
      "7b4f59bb-a606-4e03-ae9e-36ca4628b36a",
      "6fed8c10-5a5e-4e6c-9cca-7de709930f05",
      "e5a5830b-3efb-49cd-a998-f905bb203f61",
      "f88eef87-f5ca-4cab-b87c-376b344bce44",
      "70c623ee-7045-4244-9496-4ef6f2c32be9",
      "45fed628-1178-472f-b68c-083aaa177085",
      "38215e7c-cfbc-48e4-86af-65c99614aeaf",
      "6a5a3358-f1b0-437c-930d-8e2ad82a9303",
      "f8795cf9-4ef6-453f-bb82-8ad55ad76d4d",
      "faf65946-88bc-4970-b3b2-49b7a8ffdd14",
      "ab2fe982-3e79-48e9-a40a-e9a45bacaf6c",
      "43cf36d3-2aea-4850-a8bc-765416f82a48",
      "68131b96-085b-4379-8b94-81e45e070e78",
      "d243cd08-5769-426d-bc5c-1645e699b13d",
      "6d404b61-6aab-4e63-8736-16ea64fd512e",
      "16e57edc-0daf-4bbb-9eab-2568807b8ba8",
      "bbe18122-2ff2-4f61-b4ec-ddb5e9cd5dc4",
      "f6414791-26a7-4e70-8b72-915b74441a05",
      "53d9c1e9-0739-457f-92c4-85de89081e40",
      "de3ca6c6-e1fe-407e-8b00-d01f23977f74",
      "6227c8d0-46c3-4e60-8a9b-e1475238a989",
      "fb225ac6-3590-4385-82a7-ab96e18362dd",
      "848523a5-dbfb-40a1-a8d5-de3bd9365fa5",
      "cd15e73a-1b4f-4e38-8485-956df65b7a31",
      "ed2fa1dc-785f-4d95-aa8c-fa3f79c9999c",
      "317451d0-04e3-41fc-8be0-1db28c47bb0e",
      "b22f8f40-3ccf-4517-b73a-e4b9c72a5a8a",
      "8a72ab9b-74a0-4c76-80b4-229dcdd142fc",
      "2aed3c4f-2384-4daa-b05b-4311f70e00ec",
      "a129ebe1-2166-4b55-9ef7-69b6a28db931",
      "d1ccec5c-aa29-447e-a45a-7ba10a0de7f6",
      "0859444c-df0b-4102-b1a3-576dee8b6895",
      "9e0ef8b5-b0d3-4537-8a5d-cc5d45bfbf0d",
      "c43408ed-19fe-40bb-955e-e50191492763",
      "f48a4fb4-1a53-476b-b012-894a611150ff",
      "4d1d9bad-857d-4e33-bf9e-1d81dd3a8a43",
      "b021625c-02ff-4322-bd11-96e4bb6dd5d1",
      "8ac52fb6-b113-4fca-9dc5-72900466be65",
      "6dfa226b-17d6-46a6-8073-eca1e3195b1e",
      "3901158f-bcb4-4a1e-aff3-34b6a365173b",
      "3587075d-b493-4174-8cda-86d7ef61a5ac",
      "9f9a8c36-17c4-4d53-aece-047351521afe",
      "1abe86d0-f006-467e-80b5-931ea4d6904b"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1531202572841,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1531622651893,
    "parent_id": "300db9dc-27c8-4958-a08b-8d0c37f4cfe5",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Speeding up Go with custom allocators"
        ]
      ]
    },
    "type": "page",
    "version": 7,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "90b15619-97a4-461a-87ac-200d9397e3b6",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531622651893,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Id: 1407031"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Id: 1407031"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "7099efdf-4ade-4305-8e86-11262580a343",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Tags: go, programming"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Tags: go, programming"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "4f8525b6-0b96-46a9-bde7-8bf7d4b1f127",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Date: 2012-11-26T12:17:53-08:00"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Date: 2012-11-26T12:17:53-08:00"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "4fba1f2a-ed45-4960-98a6-88e216bd774f",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "HeaderImage: gfx/headers/header-07.jpg"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "HeaderImage: gfx/headers/header-07.jpg"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "f58911af-3891-403f-98d0-8da5918cd42a",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Collection: go-cookbook"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Collection: go-cookbook"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "d2cdf455-ff92-4512-a950-506ac522c15a",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Description: Speeding up a well-known benchmark (construction of binary trees) ~4x by optimizing memory allocations. "
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Description: Speeding up a well-known benchmark (construction of binary trees) ~4x by optimizing memory allocations. "
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "c8421b81-71ab-4ec4-95a6-47c49074a47e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "type": "text",
        "version": 1
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "601195e2-f36d-4635-a946-8da4fb376e91",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Summary",
              [
                [
                  "b"
                ]
              ]
            ],
            [
              ": using a custom allocator I was able to speed up an allocation heavy program ("
            ],
            [
              "binary-trees benchmark",
              [
                [
                  "a",
                  "http://benchmarksgame.alioth.debian.org/u64q/binarytrees.html"
                ]
              ]
            ],
            [
              ") ~4x."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Summary",
            "AttrFlags": 1
          },
          {
            "Text": ": using a custom allocator I was able to speed up an allocation heavy program ("
          },
          {
            "Text": "binary-trees benchmark",
            "Link": "http://benchmarksgame.alioth.debian.org/u64q/binarytrees.html"
          },
          {
            "Text": ") ~4x."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "a73d8b85-28aa-4550-81ec-6143f7a3e28b",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Allocation is expensive. It holds true for all languages. At the time of this writing, Go (version 1.0.3) doesn’t have a garbage collector that is as sophisticated as, say, garbage collector in JVM. There’s work being done to improve Go’s GC but today allocations in Go are not as cheap as they could be."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Allocation is expensive. It holds true for all languages. At the time of this writing, Go (version 1.0.3) doesn’t have a garbage collector that is as sophisticated as, say, garbage collector in JVM. There’s work being done to improve Go’s GC but today allocations in Go are not as cheap as they could be."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "21adcbd5-c67b-4843-abd0-d6a7804c85ad",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This can be seen in binary-trees benchmark which has almost no computation but millions of allocations of small objects. As a result, Java implementation is about 7x faster."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This can be seen in binary-trees benchmark which has almost no computation but millions of allocations of small objects. As a result, Java implementation is about 7x faster."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "d9b14df0-e442-4988-ad36-f86216e4c6d1",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I was able to speed up Go code by about 4x by using a custom allocator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "I was able to speed up Go code by about 4x by using a custom allocator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "cdb4e87b-9087-4b0a-95b8-0ee0efe8b150",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The benchmark builds a large binary tree composed of nodes:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The benchmark builds a large binary tree composed of nodes:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "7b4f59bb-a606-4e03-ae9e-36ca4628b36a",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "type struct Node {\n int item\n left, right *Node\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "type struct Node {\n int item\n left, right *Node\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "6fed8c10-5a5e-4e6c-9cca-7de709930f05",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To allocate a new node we use "
            ],
            [
              "\u0026Node{item, left, right}",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To allocate a new node we use "
          },
          {
            "Text": "\u0026Node{item, left, right}",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "e5a5830b-3efb-49cd-a998-f905bb203f61",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Improving allocation-heavy code"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Improving allocation-heavy code"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "f88eef87-f5ca-4cab-b87c-376b344bce44",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "First, a correction. When I said that allocation is expensive, I over-simplified."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "First, a correction. When I said that allocation is expensive, I over-simplified."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "70c623ee-7045-4244-9496-4ef6f2c32be9",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In garbage-collected languages allocation is actually very cheap. In a good allocator it’s just a single arithmetic operation to bump a pointer, which is orders of magnitude cheaper than even the best "
            ],
            [
              "malloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " implementation. "
            ],
            [
              "Malloc()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " has to maintain data structures to keep track of allocated memory so that "
            ],
            [
              "free()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " can return it back to the OS."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In garbage-collected languages allocation is actually very cheap. In a good allocator it’s just a single arithmetic operation to bump a pointer, which is orders of magnitude cheaper than even the best "
          },
          {
            "Text": "malloc()",
            "AttrFlags": 2
          },
          {
            "Text": " implementation. "
          },
          {
            "Text": "Malloc()",
            "AttrFlags": 2
          },
          {
            "Text": " has to maintain data structures to keep track of allocated memory so that "
          },
          {
            "Text": "free()",
            "AttrFlags": 2
          },
          {
            "Text": " can return it back to the OS."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "45fed628-1178-472f-b68c-083aaa177085",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "More complicated reality is that it’s garbage collection phase that is expensive."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "More complicated reality is that it’s garbage collection phase that is expensive."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "38215e7c-cfbc-48e4-86af-65c99614aeaf",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Garbage collection (gc) is triggered every once in a while. It recursively scans all the allocated objects, starting from known roots and chasing pointers. It figures out which objects are not referenced by any other object and frees them (this is the “garbage” in garbage collection that has just been collected)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Garbage collection (gc) is triggered every once in a while. It recursively scans all the allocated objects, starting from known roots and chasing pointers. It figures out which objects are not referenced by any other object and frees them (this is the “garbage” in garbage collection that has just been collected)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "6a5a3358-f1b0-437c-930d-8e2ad82a9303",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are 2 insights we get from knowing how garbage collection works internally:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are 2 insights we get from knowing how garbage collection works internally:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "f8795cf9-4ef6-453f-bb82-8ad55ad76d4d",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the more objects there are, the more expensive garbage collection is"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "the more objects there are, the more expensive garbage collection is"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "faf65946-88bc-4970-b3b2-49b7a8ffdd14",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the more pointers we need to chase, the more expensive gc is"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "the more pointers we need to chase, the more expensive gc is"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "ab2fe982-3e79-48e9-a40a-e9a45bacaf6c",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Knowing what the problem is, we know what the solution should be:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Knowing what the problem is, we know what the solution should be:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "43cf36d3-2aea-4850-a8bc-765416f82a48",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "allocate less objects (e.g. by allocating them in bulk or re-using previously allocated objects)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "allocate less objects (e.g. by allocating them in bulk or re-using previously allocated objects)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "68131b96-085b-4379-8b94-81e45e070e78",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "don’t use pointers"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "don’t use pointers"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "d243cd08-5769-426d-bc5c-1645e699b13d",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "As it happens, the majority of the 4x speedup I got in this particular benchmark came from not using pointers"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "As it happens, the majority of the 4x speedup I got in this particular benchmark came from not using pointers"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "6d404b61-6aab-4e63-8736-16ea64fd512e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Speeding binary-trees shootout benchmark"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Speeding binary-trees shootout benchmark"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "16e57edc-0daf-4bbb-9eab-2568807b8ba8",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We said that we should avoid pointers, so that garbage collector doesn’t have to chase them. The new definition of "
            ],
            [
              "Node",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " struct is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We said that we should avoid pointers, so that garbage collector doesn’t have to chase them. The new definition of "
          },
          {
            "Text": "Node",
            "AttrFlags": 2
          },
          {
            "Text": " struct is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "bbe18122-2ff2-4f61-b4ec-ddb5e9cd5dc4",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "type NodeId int\n\ntype struct Node {\n int item\n left, right NodeId\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "type NodeId int\n\ntype struct Node {\n int item\n left, right NodeId\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "f6414791-26a7-4e70-8b72-915b74441a05",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We changed "
            ],
            [
              "left",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "right",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " fields from "
            ],
            [
              "*Node",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to an alias type "
            ],
            [
              "NodeId",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ", which is just a unique integer representing a node."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We changed "
          },
          {
            "Text": "left",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "right",
            "AttrFlags": 2
          },
          {
            "Text": " fields from "
          },
          {
            "Text": "*Node",
            "AttrFlags": 2
          },
          {
            "Text": " to an alias type "
          },
          {
            "Text": "NodeId",
            "AttrFlags": 2
          },
          {
            "Text": ", which is just a unique integer representing a node."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "53d9c1e9-0739-457f-92c4-85de89081e40",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What "
            ],
            [
              "NodeId",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " means is up to us to define and we define it thusly: it’s an index into a "
            ],
            [
              "[]Node",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " array. That array is the backing store (i.e. allocator) for our nodes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What "
          },
          {
            "Text": "NodeId",
            "AttrFlags": 2
          },
          {
            "Text": " means is up to us to define and we define it thusly: it’s an index into a "
          },
          {
            "Text": "[]Node",
            "AttrFlags": 2
          },
          {
            "Text": " array. That array is the backing store (i.e. allocator) for our nodes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "de3ca6c6-e1fe-407e-8b00-d01f23977f74",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "When we need to allocate another node, we expand the "
            ],
            [
              "[]Node",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " array and return the index to that node. We can trivially map "
            ],
            [
              "NodeId",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to "
            ],
            [
              "*Node",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " by doing "
            ],
            [
              "\u0026array[nodeId]",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "When we need to allocate another node, we expand the "
          },
          {
            "Text": "[]Node",
            "AttrFlags": 2
          },
          {
            "Text": " array and return the index to that node. We can trivially map "
          },
          {
            "Text": "NodeId",
            "AttrFlags": 2
          },
          {
            "Text": " to "
          },
          {
            "Text": "*Node",
            "AttrFlags": 2
          },
          {
            "Text": " by doing "
          },
          {
            "Text": "\u0026array[nodeId]",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572841,
        "id": "6227c8d0-46c3-4e60-8a9b-e1475238a989",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572841,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Our implementation is a bit more sophisticated. In Go it’s easy to extend the array with "
            ],
            [
              "append()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " but it involves memory copy. We avoid that by pre-allocating nodes in buckets and using an array of arrays for storage. The code is still relatively simple:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Our implementation is a bit more sophisticated. In Go it’s easy to extend the array with "
          },
          {
            "Text": "append()",
            "AttrFlags": 2
          },
          {
            "Text": " but it involves memory copy. We avoid that by pre-allocating nodes in buckets and using an array of arrays for storage. The code is still relatively simple:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "fb225ac6-3590-4385-82a7-ab96e18362dd",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "const nodes_per_bucket = 1024 * 1024\n\nvar (\n  all_nodes [][]Node = make([][]Node, 0)\n  nodes_left int = 0\n  curr_node_id int = 0\n)\n\nfunc NodeFromId(id NodeId) *Node {\n  n := int(id) - 1\n  bucket := n / nodes_per_bucket\n  el := n % nodes_per_bucket\n  return \u0026all_nodes[bucket][el]\n}\n\nfunc allocNode(item int, left, right NodeId) NodeId {\n  if 0 == nodes_left {\n    new_nodes := make([]Node, nodes_per_bucket, nodes_per_bucket)\n    all_nodes = append(all_nodes, new_nodes)\n    nodes_left = nodes_per_bucket\n  }\n  nodes_left -= 1\n  node := NodeFromId(NodeId(curr_node_id + 1))\n  node.item = item\n  node.left = left\n  node.right = right\n\n  curr_node_id += 1\n  return NodeId(curr_node_id)\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "const nodes_per_bucket = 1024 * 1024\n\nvar (\n  all_nodes [][]Node = make([][]Node, 0)\n  nodes_left int = 0\n  curr_node_id int = 0\n)\n\nfunc NodeFromId(id NodeId) *Node {\n  n := int(id) - 1\n  bucket := n / nodes_per_bucket\n  el := n % nodes_per_bucket\n  return \u0026all_nodes[bucket][el]\n}\n\nfunc allocNode(item int, left, right NodeId) NodeId {\n  if 0 == nodes_left {\n    new_nodes := make([]Node, nodes_per_bucket, nodes_per_bucket)\n    all_nodes = append(all_nodes, new_nodes)\n    nodes_left = nodes_per_bucket\n  }\n  nodes_left -= 1\n  node := NodeFromId(NodeId(curr_node_id + 1))\n  node.item = item\n  node.left = left\n  node.right = right\n\n  curr_node_id += 1\n  return NodeId(curr_node_id)\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "848523a5-dbfb-40a1-a8d5-de3bd9365fa5",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Remaining changes to the code involve adding "
            ],
            [
              "NodeFromId()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " call in a few places."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Remaining changes to the code involve adding "
          },
          {
            "Text": "NodeFromId()",
            "AttrFlags": 2
          },
          {
            "Text": " call in a few places."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "cd15e73a-1b4f-4e38-8485-956df65b7a31",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can compare "
            ],
            [
              "original",
              [
                [
                  "a",
                  "https://github.com/kjk/kjkpub/blob/master/gobench/bintree.go"
                ]
              ]
            ],
            [
              " to my "
            ],
            [
              "faster version",
              [
                [
                  "a",
                  "https://github.com/kjk/kjkpub/blob/master/gobench/bintree3.go"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can compare "
          },
          {
            "Text": "original",
            "Link": "https://github.com/kjk/kjkpub/blob/master/gobench/bintree.go"
          },
          {
            "Text": " to my "
          },
          {
            "Text": "faster version",
            "Link": "https://github.com/kjk/kjkpub/blob/master/gobench/bintree3.go"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "ed2fa1dc-785f-4d95-aa8c-fa3f79c9999c",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another minor advantage if using integers instead of pointers in Node struct is that on 64-bit machines we use only 4 bytes for an int vs. 8 bytes for a pointer."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another minor advantage if using integers instead of pointers in Node struct is that on 64-bit machines we use only 4 bytes for an int vs. 8 bytes for a pointer."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "317451d0-04e3-41fc-8be0-1db28c47bb0e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Drawbacks of custom allocators"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Drawbacks of custom allocators"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "b22f8f40-3ccf-4517-b73a-e4b9c72a5a8a",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The biggest drawback is that we lost ability to free objects. Memory we’ve allocated will never be returned to the OS until the program exits."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The biggest drawback is that we lost ability to free objects. Memory we’ve allocated will never be returned to the OS until the program exits."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "8a72ab9b-74a0-4c76-80b4-229dcdd142fc",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s not a problem in this case, since the tree only grows and the program ends when it’s done."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s not a problem in this case, since the tree only grows and the program ends when it’s done."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "2aed3c4f-2384-4daa-b05b-4311f70e00ec",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In different code this could be a much bigger issue. There are ways to free memory even with custom allocators but they require more complexity and evolve towards implementing a custom garbage collector at which point it might be better to go back to simple code and leave the work to built-in garbage collector."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In different code this could be a much bigger issue. There are ways to free memory even with custom allocators but they require more complexity and evolve towards implementing a custom garbage collector at which point it might be better to go back to simple code and leave the work to built-in garbage collector."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "a129ebe1-2166-4b55-9ef7-69b6a28db931",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "How come Java is so much faster?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "How come Java is so much faster?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "d1ccec5c-aa29-447e-a45a-7ba10a0de7f6",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s a valid question: both Java and Go have garbage collectors, why is Java’s so much better on this benchmark?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s a valid question: both Java and Go have garbage collectors, why is Java’s so much better on this benchmark?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "0859444c-df0b-4102-b1a3-576dee8b6895",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I can only speculate."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "I can only speculate."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "9e0ef8b5-b0d3-4537-8a5d-cc5d45bfbf0d",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Java, unlike Go, uses generational garbage collector, which has 2 arenas: one for young (newly allocated) objects (called nursery) and one for old objects."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Java, unlike Go, uses generational garbage collector, which has 2 arenas: one for young (newly allocated) objects (called nursery) and one for old objects."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "c43408ed-19fe-40bb-955e-e50191492763",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It has been observed that most objects die young. Generational garbage collector allocates objects in nursery. Most collections only collect objects in nursery. Objects that survived collections in nursery are moved to the second arena for old objects, which is collected at a much lower rate."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It has been observed that most objects die young. Generational garbage collector allocates objects in nursery. Most collections only collect objects in nursery. Objects that survived collections in nursery are moved to the second arena for old objects, which is collected at a much lower rate."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "f48a4fb4-1a53-476b-b012-894a611150ff",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Go collector is a simpler mark-and-sweep collector which has to scan all allocated objects during every collection."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Go collector is a simpler mark-and-sweep collector which has to scan all allocated objects during every collection."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "4d1d9bad-857d-4e33-bf9e-1d81dd3a8a43",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generational garbage collectors have overhead because they have to copy objects in memory and update references between objects when that happens. On the other hand they can also compact memory, improving caching and they scan a smaller number of objects during each collection."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generational garbage collectors have overhead because they have to copy objects in memory and update references between objects when that happens. On the other hand they can also compact memory, improving caching and they scan a smaller number of objects during each collection."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "b021625c-02ff-4322-bd11-96e4bb6dd5d1",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In this particular benchmark there are many Node objects and they never die, so they are promoted to rarely collected arena for old objects and each collection is cheaper because it only looks at a small number of recently allocated Node objects."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In this particular benchmark there are many Node objects and they never die, so they are promoted to rarely collected arena for old objects and each collection is cheaper because it only looks at a small number of recently allocated Node objects."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "8ac52fb6-b113-4fca-9dc5-72900466be65",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There’s hope for Go, though. The implementors are aware that garbage collector is not as good as it could be and there is an ongoing work on implementing a better one."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There’s hope for Go, though. The implementors are aware that garbage collector is not as good as it could be and there is an ongoing work on implementing a better one."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "6dfa226b-17d6-46a6-8073-eca1e3195b1e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "A win in C++ as well"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "A win in C++ as well"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "3901158f-bcb4-4a1e-aff3-34b6a365173b",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Optimizing by reducing the amount of allocations or making allocations faster is applicable to non-gc languages as well, like C and C++, because "
            ],
            [
              "malloc()\\free()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " are relatively slow functions."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Optimizing by reducing the amount of allocations or making allocations faster is applicable to non-gc languages as well, like C and C++, because "
          },
          {
            "Text": "malloc()\\free()",
            "AttrFlags": 2
          },
          {
            "Text": " are relatively slow functions."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "3587075d-b493-4174-8cda-86d7ef61a5ac",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Back in the day when I was working on Poppler, I achieved a significant ~19% speedup by "
            ],
            [
              "improving a string class",
              [
                [
                  "a",
                  "/article/Performance-optimization-story.html"
                ]
              ]
            ],
            [
              " to avoid an additional allocation in 90% of the cases. I now use this trick in my C++ code e.g. in "
            ],
            [
              "SumatraPDF code",
              [
                [
                  "a",
                  "https://code.google.com/p/sumatrapdf/source/browse/trunk/src/utils/Vec.h"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Back in the day when I was working on Poppler, I achieved a significant ~19% speedup by "
          },
          {
            "Text": "improving a string class",
            "Link": "/article/Performance-optimization-story.html"
          },
          {
            "Text": " to avoid an additional allocation in 90% of the cases. I now use this trick in my C++ code e.g. in "
          },
          {
            "Text": "SumatraPDF code",
            "Link": "https://code.google.com/p/sumatrapdf/source/browse/trunk/src/utils/Vec.h"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "9f9a8c36-17c4-4d53-aece-047351521afe",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "I also managed to improve Poppler by another ~25% by using a simple, "
            ],
            [
              "custom allocator",
              [
                [
                  "a",
                  "https://bugs.freedesktop.org/show_bug.cgi?id=7910"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "I also managed to improve Poppler by another ~25% by using a simple, "
          },
          {
            "Text": "custom allocator",
            "Link": "https://bugs.freedesktop.org/show_bug.cgi?id=7910"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531202572842,
        "id": "1abe86d0-f006-467e-80b5-931ea4d6904b",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531202572842,
        "parent_id": "d4fc1c88-e604-4cb0-8f39-6107bf1d766c",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s a good trick to know."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s a good trick to know."
          }
        ]
      }
    ],
    "title": "Speeding up Go with custom allocators",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 9
    }
  ],
  "Collections": null,
  "CollectionViews": null
}